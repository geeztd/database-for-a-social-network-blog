CREATE TABLESPACE SocNet
DATAFILE 'SocNet.dbf'
SIZE 50M
AUTOEXTEND ON NEXT 15M
MAXSIZE UNLIMITED;

CREATE TABLE Role_Table (
  role_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  Name NVARCHAR2(50) UNIQUE NOT NULL
);
--DROP TABLE Role_Table;

INSERT INTO Role_table (Name) VALUES ('Администратор');
INSERT INTO Role_table (Name) VALUES ('Модератор');
INSERT INTO Role_table (Name) VALUES ('Пользователь');
INSERT INTO Role_table (Name) VALUES ('Гость');

CREATE TABLE User_table (
  User_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  Login NVARCHAR2(50) UNIQUE NOT NULL,
  Password NVARCHAR2(255) NOT NULL,
  Email NVARCHAR2(100) UNIQUE,
  Name NVARCHAR2(50) NOT NULL,
  SecondName NVARCHAR2(50),
  Age NUMBER(3),
  Role_Id NUMBER REFERENCES Role_Table(Role_Id)
);
--DROP TABLE User_table;

CREATE TABLE Blog (
  Blog_Id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  User_Id NUMBER REFERENCES User_Table(User_Id) ON DELETE CASCADE,
  Name NVARCHAR2(100) NOT NULL,
  Discription NVARCHAR2(255),
  Timestamp DATE DEFAULT SYSDATE
);
--DROP TABLE Blog;

CREATE TABLE Post (
  Post_Id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  Blog_Id NUMBER REFERENCES Blog(Blog_Id) ON DELETE CASCADE,
  Name NVARCHAR2(100) NOT NULL,
  Containing CLOB,
  Timestamp DATE DEFAULT SYSDATE,
  CountViews NUMBER DEFAULT 0
);
--DROP TABLE Post;

CREATE TABLE Comment_Table (
  Comment_Id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  User_Id NUMBER REFERENCES User_Table(User_Id) ON DELETE CASCADE,
  Post_Id NUMBER REFERENCES Post(Post_Id) ON DELETE CASCADE,
  Containing CLOB,
  Timestamp DATE DEFAULT SYSDATE
);
--DROP TABLE Comment_Table;

CREATE TABLE LIKE_TABLE (
  LIKE_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  User_Id NUMBER REFERENCES User_Table(User_Id) ON DELETE CASCADE,
  Comment_Id NUMBER REFERENCES Comment_Table(Comment_Id) ON DELETE CASCADE,
  Timestamp DATE DEFAULT SYSDATE
)
--DROP TABLE LIKE_TABLE;

CREATE TABLE Favorite (
  Favorite_Id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  User_Id NUMBER REFERENCES User_Table(User_Id),
  Post_Id NUMBER REFERENCES Post(Post_Id),
  Timestamp DATE DEFAULT SYSDATE
);
--DROP TABLE Favorite;

CREATE TABLE Subscription (
  Subscription_Id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  Subscriber_Id NUMBER REFERENCES User_Table(User_Id) ON DELETE CASCADE,
  Blog_Id NUMBER REFERENCES Blog(Blog_Id) ON DELETE CASCADE,
  Timestamp Date DEFAULT SYSDATE
);
--DROP TABLE Subscription;

CREATE INDEX idx_post_blogid ON Post(Blog_Id);
CREATE INDEX idx_comment_postid ON Comment_Table(Post_Id);
begin
    ctx_ddl.create_preference('my_wordlist', 'BASIC_WORDLIST');
    ctx_ddl.create_preference('my_lexer', 'AUTO_LEXER');
    ctx_ddl.set_attribute('my_lexer', 'INDEX_STEMS','YES');
end;

create index post_text_index ON Post(Containing) indextype is ctxsys.context parameters ('LEXER my_lexer WORDLIST my_wordlist');

CREATE UNIQUE INDEX unique_subscription ON SUBSCRIPTION(subscriber_Id, blog_Id);
CREATE UNIQUE INDEX unique_favorite ON Favorite(User_Id, Post_Id);
CREATE UNIQUE INDEX unique_like ON Like_Table(User_Id, Comment_Id);

CREATE VIEW user_subscriptions AS
SELECT  u.USER_ID, u.LOGIN, b.BLOG_ID, b."NAME"
FROM  USER_TABLE u
JOIN  SUBSCRIPTION s ON u.USER_ID = s.SUBSCRIBER_ID
JOIN  BLOG b ON s.BLOG_ID = b.BLOG_ID;

CREATE VIEW user_favorite_posts AS
SELECT u.USER_ID, u.LOGIN, p.POST_ID, p."NAME",  p.CONTAINING,  p.BLOG_ID, p."TIMESTAMP"
FROM USER_TABLE u
JOIN FAVORITE f ON u.USER_ID = f.USER_ID
JOIN POST p ON f.POST_ID = p.POST_ID;

CREATE VIEW popular_posts AS
SELECT  p.POST_ID, p.BLOG_ID, p."NAME", p."TIMESTAMP", p.COUNTVIEWS,
    COUNT(DISTINCT f.FAVORITE_ID) AS like_count,
    COUNT(DISTINCT c.COMMENT_ID) AS comment_count
FROM  POST p
LEFT JOIN FAVORITE f ON p.POST_ID = f.POST_ID
LEFT JOIN COMMENT_TABLE c ON p.POST_ID = c.POST_ID
GROUP BY p.POST_ID, p.BLOG_ID, p."NAME", p."TIMESTAMP", p.COUNTVIEWS
ORDER BY like_count DESC, comment_count DESC
FETCH FIRST 20 ROWS ONLY;
--DROP VIEW popular_posts;

CREATE SEQUENCE blog_seq START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE post_seq START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE comment_seq START WITH 1 INCREMENT BY 1 NOCACHE;

select * FROM post;